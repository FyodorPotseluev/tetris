!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BIN_DIR	Makefile	/^BIN_DIR := $(BUILD_DIR)\/bin$/;"	m
BOTTOM_TOP_BOUNDARY	include/frontend.h	62;"	d
BUILD_DIR	Makefile	/^BUILD_DIR := .\/build$/;"	m
BUILD_DIRS	Makefile	/^BUILD_DIRS := $(OBJ_DIR) $(BIN_DIR)$/;"	m
CC	Makefile	/^CC = gcc # using gcc compiler$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Wextra -g3 -O0 -Iinclude -fsanitize=address,undefined$/;"	m
CLOSE_WINDOW_MSG	include/constants.h	64;"	d
CONFLICT_RESOLUTION_H_INCLUDED	include/conflict_resolution.h	4;"	d
CONSTANTS_H_INCLUDED	include/constants.h	4;"	d
CURR_TERMINAL_SIZE_MSG	include/constants.h	56;"	d
EMPTY_CELL_ROW	include/frontend.h	54;"	d
EXECUTABLE	Makefile	/^EXECUTABLE := $(BIN_DIR)\/$(PROJECT)$/;"	m
FINAL_SCORE_MSG	include/constants.h	68;"	d
FRONTEND_H_INCLUDED	include/frontend.h	4;"	d
GHOST_CELL_ROW	include/frontend.h	58;"	d
INC_DIR	Makefile	/^INC_DIR := .\/include$/;"	m
MAKE_FUNCTION_MATRIX_COPY	src/conflict_resolution.c	/^MAKE_FUNCTION_MATRIX_COPY(small_matrix_copy, small)$/;"	f
MAKE_FUNCTION_MATRIX_COPY	src/conflict_resolution.c	7;"	d	file:
OBJMODULES	Makefile	/^OBJMODULES := $(patsubst $(SRC_DIR)\/%.c, $(OBJ_DIR)\/%.o, $(SRCMODULES))$/;"	m
OBJ_DIR	Makefile	/^OBJ_DIR := $(BUILD_DIR)\/obj$/;"	m
OCCUPIED_CELL_ROW	include/frontend.h	56;"	d
PROJECT	Makefile	/^PROJECT := tetris$/;"	m
REQUIRED_TERMINAL_SIZE_MSG	include/constants.h	58;"	d
RESIZE_REQUEST_MSG_1	include/constants.h	60;"	d
RESIZE_REQUEST_MSG_2	include/constants.h	62;"	d
RESIZE_WARNING_MSG	include/constants.h	54;"	d
ROTATION_DEMO_H_INCLUDED	include/rotation.h	4;"	d
SIDE_BOUNDARY	include/frontend.h	64;"	d
SRCMODULES	Makefile	/^SRCMODULES := $(wildcard $(SRC_DIR)\/*.c)$/;"	m
SRC_DIR	Makefile	/^SRC_DIR := .\/src$/;"	m
apply_backup	src/conflict_resolution.c	/^static void apply_backup(struct_piece *piece, const void *src, int dx, int dy)$/;"	f	file:
backward	include/constants.h	/^    forward, backward$/;"	e	enum:tag_enum_direction
big	include/constants.h	/^        bool big[big_piece_size][big_piece_size];$/;"	m	union:tag_struct_piece::tag_form
big_piece_size	include/constants.h	/^    big_piece_size                      = 4,$/;"	e	enum:constants
bottom	src/tetris.c	/^    bottom, top, left_side, right_side$/;"	e	enum:tag_boundary_side	file:
bottom_top_boundaries_crossing_	src/conflict_resolution.c	/^static bool bottom_top_boundaries_crossing_($/;"	f	file:
boundary_side	src/tetris.c	/^} boundary_side;$/;"	t	typeref:enum:tag_boundary_side	file:
cast_ghost	src/tetris.c	/^void cast_ghost($/;"	f
cell_height	include/frontend.h	/^    cell_height                         = 2,$/;"	e	enum:frontend_consts
cell_occupied_by_	src/conflict_resolution.c	/^static bool cell_occupied_by_($/;"	f	file:
cell_width	include/frontend.h	/^    cell_width                          = 3,$/;"	e	enum:frontend_consts
choose_curr_dude_img_array	src/tetris.c	/^void choose_curr_dude_img_array($/;"	f
clear_completed_lines_update_score_and_level_up	src/tetris.c	/^void clear_completed_lines_update_score_and_level_up($/;"	f
constants	include/constants.h	/^enum constants {$/;"	g
copy_callback	src/rotation.c	/^static void copy_callback(void *dst, void *src, int len, int x, int y)$/;"	f	file:
crossing_action	include/conflict_resolution.h	/^typedef enum tag_crossing_action { prevention, signal } crossing_action;$/;"	t	typeref:enum:tag_crossing_action
curr_line_is_completed	src/tetris.c	/^bool curr_line_is_completed(int num)$/;"	f
curr_x	src/tetris.c	/^int curr_x(const struct_piece *piece, int x)$/;"	f
curr_y	src/tetris.c	/^int curr_y(const struct_piece *piece, int y)$/;"	f
delete_completed_lines	src/tetris.c	/^void delete_completed_lines($/;"	f
direction	include/constants.h	/^    enum_direction direction;$/;"	m	struct:tag_struct_dude
dude_	src/tetris.c	/^void dude_(dude_action action, const struct_dude *dude)$/;"	f
dude_action	src/tetris.c	/^} dude_action;$/;"	t	typeref:enum:tag_dude_action	file:
dude_cell_height	src/tetris.c	/^int dude_cell_height(const struct_dude *dude)$/;"	f
dude_squat_height	include/constants.h	/^    dude_squat_height                   = 1,$/;"	e	enum:constants
dude_step	src/tetris.c	/^void dude_step(struct_dude *dude)$/;"	f
dude_straight_height	include/constants.h	/^    dude_straight_height                = 2,$/;"	e	enum:constants
dude_width	include/constants.h	/^    dude_width                          = 1,$/;"	e	enum:constants
eighth	include/constants.h	/^        eighth  = 135,  ninth      = 94,   tenth      = 64,   eleventh  = 43,$/;"	e	enum:tag_speed_list
eleventh	include/constants.h	/^        eighth  = 135,  ninth      = 94,   tenth      = 64,   eleventh  = 43,$/;"	e	enum:tag_speed_list
empty	include/constants.h	/^    empty = 0, occupied = 1, ghost, falling$/;"	e	enum:tag_enum_field
end_game	src/tetris.c	/^void end_game(int score)$/;"	f
enum_direction	include/constants.h	/^} enum_direction;$/;"	t	typeref:enum:tag_enum_direction
enum_field	include/constants.h	/^} enum_field;$/;"	t	typeref:enum:tag_enum_field
enum_posture	include/constants.h	/^} enum_posture;$/;"	t	typeref:enum:tag_enum_posture
erase_falling_cells	src/tetris.c	/^    erase_ghost_cells, erase_falling_cells$/;"	e	enum:tag_transform_field_action	file:
erase_ghost_cells	src/tetris.c	/^    erase_ghost_cells, erase_falling_cells$/;"	e	enum:tag_transform_field_action	file:
falling	include/constants.h	/^    empty = 0, occupied = 1, ghost, falling$/;"	e	enum:tag_enum_field
falling_piece_field_conflict	src/conflict_resolution.c	/^static bool falling_piece_field_conflict($/;"	f	file:
falling_piece_field_crossing_conflict	src/conflict_resolution.c	/^bool falling_piece_field_crossing_conflict($/;"	f
field_absorbes_piece	src/tetris.c	/^    field_absorbes_piece, record_falling_cells, record_ghost_cells,$/;"	e	enum:tag_transform_field_action	file:
field_has_ended	src/tetris.c	/^bool field_has_ended(const struct_piece *piece, int y)$/;"	f
field_height	include/constants.h	/^    field_height                        = 20,$/;"	e	enum:constants
field_matrix_rearrangement	src/tetris.c	/^void field_matrix_rearrangement($/;"	f
field_or_side_boundaries_conflict	src/conflict_resolution.c	/^bool field_or_side_boundaries_conflict($/;"	f
field_width	include/constants.h	/^    field_width                         = 10,$/;"	e	enum:constants
fifteenth	include/constants.h	/^        twelfth = 28,   thirteenth = 18,   fourteenth = 11,   fifteenth = 7$/;"	e	enum:tag_speed_list
fifth	include/constants.h	/^        fourth  = 473,  fifth      = 355,  sixth      = 262,  seventh   = 190,$/;"	e	enum:tag_speed_list
find_continuous_block_of_completed_lines	src/tetris.c	/^void find_continuous_block_of_completed_lines($/;"	f
first	include/constants.h	/^        zero,           first      = 1000000, second     = 793,  third     = 618,$/;"	e	enum:tag_speed_list
form	include/constants.h	/^    } form;$/;"	m	struct:tag_struct_piece	typeref:union:tag_struct_piece::tag_form
forward	include/constants.h	/^    forward, backward$/;"	e	enum:tag_enum_direction
four_lines_score_bonus	include/constants.h	/^    four_lines_score_bonus              = 800,$/;"	e	enum:constants
fourteenth	include/constants.h	/^        twelfth = 28,   thirteenth = 18,   fourteenth = 11,   fifteenth = 7$/;"	e	enum:tag_speed_list
fourth	include/constants.h	/^        fourth  = 473,  fifth      = 355,  sixth      = 262,  seventh   = 190,$/;"	e	enum:tag_speed_list
frontend_consts	include/frontend.h	/^enum frontend_consts {$/;"	g
game_info_gap	include/frontend.h	/^    game_info_gap                       = 2$/;"	e	enum:frontend_consts
game_info_x	src/tetris.c	/^int game_info_x()$/;"	f
game_info_y	src/tetris.c	/^int game_info_y(int y)$/;"	f
get_dude_screen_x	src/tetris.c	/^int get_dude_screen_x(const struct_dude *dude)$/;"	f
get_dude_screen_y	src/tetris.c	/^int get_dude_screen_y(const struct_dude *dude)$/;"	f
get_init_x	src/tetris.c	/^int get_init_x()$/;"	f
get_init_y	src/tetris.c	/^int get_init_y()$/;"	f
get_last_dude_y	src/tetris.c	/^int get_last_dude_y(const struct_dude *dude)$/;"	f
get_random_piece	src/tetris.c	/^struct_piece get_random_piece(const struct_piece *set_of_pieces)$/;"	f
ghost	include/constants.h	/^    empty = 0, occupied = 1, ghost, falling$/;"	e	enum:tag_enum_field
ghost_decline	include/constants.h	/^    signed char x_shift, y_decline, ghost_decline;$/;"	m	struct:tag_struct_piece
ghost_y	src/tetris.c	/^int ghost_y(const struct_piece *piece, int y)$/;"	f
handle_i_form_piece_rotation_conflict	src/conflict_resolution.c	/^static void handle_i_form_piece_rotation_conflict($/;"	f	file:
handle_i_piece	src/conflict_resolution.c	/^static void handle_i_piece(struct_piece *piece, int *dx)$/;"	f	file:
handle_regular_piece_rotation_conflict	src/conflict_resolution.c	/^static void handle_regular_piece_rotation_conflict($/;"	f	file:
handle_rotation	src/tetris.c	/^void handle_rotation($/;"	f
handle_rotation_conflicts	src/conflict_resolution.c	/^void handle_rotation_conflicts($/;"	f
height	include/constants.h	/^    unsigned char height;$/;"	m	struct:tag_struct_dude
hide_dude	src/tetris.c	/^    hide_dude, print_dude$/;"	e	enum:tag_dude_action	file:
hide_ghost	src/tetris.c	/^    hide_piece, print_piece, hide_ghost, print_ghost$/;"	e	enum:tag_piece_action	file:
hide_piece	src/tetris.c	/^    hide_piece, print_piece, hide_ghost, print_ghost$/;"	e	enum:tag_piece_action	file:
horizontal_1	include/constants.h	/^    horizontal_1, vertical_1, horizontal_2, vertical_2, orientation_count$/;"	e	enum:tag_position
horizontal_2	include/constants.h	/^    horizontal_1, vertical_1, horizontal_2, vertical_2, orientation_count$/;"	e	enum:tag_position
horizontal_orientation	src/conflict_resolution.c	/^static bool horizontal_orientation(const struct_piece *piece)$/;"	f	file:
i_form	include/constants.h	/^    bool i_form;$/;"	m	struct:tag_struct_piece
i_form_piece_rotation_conflicts_handling	src/conflict_resolution.c	/^static void i_form_piece_rotation_conflicts_handling($/;"	f	file:
i_piece_rotation_conflict	src/conflict_resolution.c	/^static bool i_piece_rotation_conflict($/;"	f	file:
init_callback	src/rotation.c	/^static void init_callback(void *dst, void *src, int len, int x, int y)$/;"	f	file:
init_resize_screen_y	src/tetris.c	/^int init_resize_screen_y(int row)$/;"	f
init_screen_x	src/tetris.c	/^int init_screen_x()$/;"	f
init_set_of_pieces	src/tetris.c	/^void init_set_of_pieces(struct_piece *set_of_pieces)$/;"	f
initial_piece_shift	include/constants.h	/^    initial_piece_shift                 = 4,$/;"	e	enum:constants
key_esc	include/constants.h	/^    key_esc                             = 27,$/;"	e	enum:constants
last_field_row_num	include/constants.h	/^    last_field_row_num                  = 19,$/;"	e	enum:constants
left	include/constants.h	/^typedef enum tag_move_direction { left = 1, right } move_direction;$/;"	e	enum:tag_move_direction
left_side	src/tetris.c	/^    bottom, top, left_side, right_side$/;"	e	enum:tag_boundary_side	file:
level_label_row	include/frontend.h	/^    level_label_row                     = 0,$/;"	e	enum:frontend_consts
level_row	include/frontend.h	/^    level_row                           = 1,$/;"	e	enum:frontend_consts
level_up_if_necessary	src/tetris.c	/^void level_up_if_necessary(int *level, int num_of_completed_lines)$/;"	f
lower_field_cell_is_occupied	src/tetris.c	/^bool lower_field_cell_is_occupied($/;"	f
main	src/tetris.c	/^int main()$/;"	f
matrix_	src/rotation.c	/^static void matrix_($/;"	f	file:
matrix_callback	src/rotation.c	/^typedef void (*matrix_callback)(void*, void*, int, int, int);$/;"	t	file:
max_msg_str_size	include/constants.h	/^    max_msg_str_size                    = 80$/;"	e	enum:constants
max_num_of_completed_lines	include/constants.h	/^    max_num_of_completed_lines          = 4,$/;"	e	enum:constants
maximum_game_level	include/constants.h	/^    maximum_game_level                  = 15,$/;"	e	enum:constants
min_screen_height	src/tetris.c	/^int min_screen_height()$/;"	f
min_screen_width	src/tetris.c	/^int min_screen_width()$/;"	f
move_	src/tetris.c	/^void move_($/;"	f
move_direction	include/constants.h	/^typedef enum tag_move_direction { left = 1, right } move_direction;$/;"	t	typeref:enum:tag_move_direction
next_label_row	include/frontend.h	/^    next_label_row                      = 6,$/;"	e	enum:frontend_consts
next_orientation	src/conflict_resolution.c	/^static void next_orientation(struct_piece *piece)$/;"	f	file:
next_row	include/frontend.h	/^    next_row                            = 7,$/;"	e	enum:frontend_consts
ninth	include/constants.h	/^        eighth  = 135,  ninth      = 94,   tenth      = 64,   eleventh  = 43,$/;"	e	enum:tag_speed_list
num_of_completed_lines_for_level_up	include/constants.h	/^    num_of_completed_lines_for_level_up = 10,$/;"	e	enum:constants
num_of_pieces	include/constants.h	/^    num_of_pieces                       = 7,$/;"	e	enum:constants
num_of_resize_msg_lines	include/constants.h	/^    num_of_resize_msg_lines             = 6,$/;"	e	enum:constants
o_piece	src/conflict_resolution.c	/^static bool o_piece(const struct_piece *piece)$/;"	f	file:
occupied	include/constants.h	/^    empty = 0, occupied = 1, ghost, falling$/;"	e	enum:tag_enum_field
one_line_score_bonus	include/constants.h	/^    one_line_score_bonus                = 100,$/;"	e	enum:constants
orientation	include/constants.h	/^    position orientation;$/;"	m	struct:tag_struct_piece
orientation_count	include/constants.h	/^    horizontal_1, vertical_1, horizontal_2, vertical_2, orientation_count$/;"	e	enum:tag_position
out_of_bottom_field_boundary	src/conflict_resolution.c	/^static bool out_of_bottom_field_boundary(const struct_piece *piece)$/;"	f	file:
out_of_left_boundary	src/conflict_resolution.c	/^static bool out_of_left_boundary(const struct_piece *piece)$/;"	f	file:
out_of_right_boundary	src/conflict_resolution.c	/^static bool out_of_right_boundary(const struct_piece *piece)$/;"	f	file:
out_of_top_field_boundary	src/conflict_resolution.c	/^static bool out_of_top_field_boundary(const struct_piece *piece)$/;"	f	file:
piece_	src/tetris.c	/^void piece_(piece_action action, const struct_piece *piece)$/;"	f
piece_action	src/tetris.c	/^} piece_action;$/;"	t	typeref:enum:tag_piece_action	file:
piece_fall_step	src/tetris.c	/^void piece_fall_step($/;"	f
piece_falls	src/tetris.c	/^void piece_falls($/;"	f
piece_has_fallen	src/tetris.c	/^bool piece_has_fallen($/;"	f
piece_left_boundary_conflict	src/conflict_resolution.c	/^static bool piece_left_boundary_conflict($/;"	f	file:
piece_right_boundary_conflict	src/conflict_resolution.c	/^static bool piece_right_boundary_conflict($/;"	f	file:
piece_spawn	src/tetris.c	/^void piece_spawn(enum_field (*field)[field_width], struct_piece *piece)$/;"	f
position	include/constants.h	/^} position;$/;"	t	typeref:enum:tag_position
posture	include/constants.h	/^    enum_posture posture;$/;"	m	struct:tag_struct_dude
prev_orientation	src/conflict_resolution.c	/^static void prev_orientation(struct_piece *piece)$/;"	f	file:
prevention	include/conflict_resolution.h	/^typedef enum tag_crossing_action { prevention, signal } crossing_action;$/;"	e	enum:tag_crossing_action
print_bottom_top_boundary	src/tetris.c	/^void print_bottom_top_boundary()$/;"	f
print_cell_	src/tetris.c	/^void print_cell_(enum_field type, int x, int y)$/;"	f
print_centered_format_msg	src/tetris.c	/^void print_centered_format_msg($/;"	f
print_dude	src/tetris.c	/^    hide_dude, print_dude$/;"	e	enum:tag_dude_action	file:
print_field	src/tetris.c	/^void print_field(const enum_field (*field)[field_width])$/;"	f
print_field_boundary	src/tetris.c	/^void print_field_boundary($/;"	f
print_game_info	src/tetris.c	/^void print_game_info(int info, int position)$/;"	f
print_ghost	src/tetris.c	/^    hide_piece, print_piece, hide_ghost, print_ghost$/;"	e	enum:tag_piece_action	file:
print_labels	src/tetris.c	/^void print_labels()$/;"	f
print_piece	src/tetris.c	/^    hide_piece, print_piece, hide_ghost, print_ghost$/;"	e	enum:tag_piece_action	file:
print_resize_request_msg	src/tetris.c	/^void print_resize_request_msg(int row, int col)$/;"	f
print_score_message	src/tetris.c	/^void print_score_message(int score)$/;"	f
print_side_boundary	src/tetris.c	/^void print_side_boundary(int x, int y)$/;"	f
process_completed_line	src/tetris.c	/^void process_completed_line($/;"	f
process_input	src/tetris.c	/^void process_input($/;"	f
process_key	src/tetris.c	/^void process_key($/;"	f
process_uncompleted_line	src/tetris.c	/^void process_uncompleted_line($/;"	f
record_falling_cells	src/tetris.c	/^    field_absorbes_piece, record_falling_cells, record_ghost_cells,$/;"	e	enum:tag_transform_field_action	file:
record_ghost_cells	src/tetris.c	/^    field_absorbes_piece, record_falling_cells, record_ghost_cells,$/;"	e	enum:tag_transform_field_action	file:
regular_piece_rotation_conflict	src/conflict_resolution.c	/^static bool regular_piece_rotation_conflict($/;"	f	file:
regular_piece_rotation_conflicts_handling	src/conflict_resolution.c	/^static void regular_piece_rotation_conflicts_handling($/;"	f	file:
replace_upmost_not_empty_lines_with_empty_cells	src/tetris.c	/^void replace_upmost_not_empty_lines_with_empty_cells($/;"	f
reverse_rows_callback	src/rotation.c	/^static void reverse_rows_callback(void *dst, void *src, int len, int x, int y)$/;"	f	file:
reversion	src/rotation.c	/^static int reversion(int num, int arr_len)$/;"	f	file:
right	include/constants.h	/^typedef enum tag_move_direction { left = 1, right } move_direction;$/;"	e	enum:tag_move_direction
right_side	src/tetris.c	/^    bottom, top, left_side, right_side$/;"	e	enum:tag_boundary_side	file:
rotate	src/rotation.c	/^void rotate(void *piece, int len)$/;"	f
score_bonus	src/tetris.c	/^int score_bonus(int level, int num_of_completed_lines)$/;"	f
score_increase	src/tetris.c	/^void score_increase(int *score, int level, int num_of_completed_lines)$/;"	f
score_label_row	include/frontend.h	/^    score_label_row                     = 3,$/;"	e	enum:frontend_consts
score_row	include/frontend.h	/^    score_row                           = 4,$/;"	e	enum:frontend_consts
screen_size_check	src/tetris.c	/^void screen_size_check()$/;"	f
second	include/constants.h	/^        zero,           first      = 1000000, second     = 793,  third     = 618,$/;"	e	enum:tag_speed_list
select_and_perform_transformation	src/tetris.c	/^bool select_and_perform_transformation($/;"	f
set_x_cycle_bound_cond	src/conflict_resolution.c	/^static bool set_x_cycle_bound_cond($/;"	f	file:
set_y_cycle_cond	src/conflict_resolution.c	/^static bool set_y_cycle_cond($/;"	f	file:
seventh	include/constants.h	/^        fourth  = 473,  fifth      = 355,  sixth      = 262,  seventh   = 190,$/;"	e	enum:tag_speed_list
shift_down_upper_not_empty_lines_for_num_positions	src/tetris.c	/^void shift_down_upper_not_empty_lines_for_num_positions($/;"	f
show_next_piece_preview	src/tetris.c	/^void show_next_piece_preview(struct_piece piece, struct_piece next_piece)$/;"	f
side_boundaries_crossing_	src/conflict_resolution.c	/^bool side_boundaries_crossing_($/;"	f
side_boundary_width	include/frontend.h	/^    side_boundary_width                 = 1,$/;"	e	enum:frontend_consts
signal	include/conflict_resolution.h	/^typedef enum tag_crossing_action { prevention, signal } crossing_action;$/;"	e	enum:tag_crossing_action
sixth	include/constants.h	/^        fourth  = 473,  fifth      = 355,  sixth      = 262,  seventh   = 190,$/;"	e	enum:tag_speed_list
size	include/constants.h	/^    unsigned char size;$/;"	m	struct:tag_struct_piece
small	include/constants.h	/^        bool small[small_piece_size][small_piece_size];$/;"	m	union:tag_struct_piece::tag_form
small_piece_size	include/constants.h	/^    small_piece_size                    = 3,$/;"	e	enum:constants
special_i_piece_bottom_top_case	src/conflict_resolution.c	/^static bool special_i_piece_bottom_top_case(const struct_piece *piece)$/;"	f	file:
special_i_piece_side_case	src/conflict_resolution.c	/^static bool special_i_piece_side_case(const struct_piece *piece)$/;"	f	file:
speed_list	include/constants.h	/^} speed_list;$/;"	t	typeref:enum:tag_speed_list
squat	include/constants.h	/^    straight, squat$/;"	e	enum:tag_enum_posture
squat_dude_goes_back	include/frontend.h	/^const char *const squat_dude_goes_back[] = {$/;"	v
squat_dude_goes_forth	include/frontend.h	/^const char *const squat_dude_goes_forth[] = {$/;"	v
straight	include/constants.h	/^    straight, squat$/;"	e	enum:tag_enum_posture
straight_dude_goes_back	include/frontend.h	/^const char *const straight_dude_goes_back[] = {$/;"	v
straight_dude_goes_forth	include/frontend.h	/^const char *const straight_dude_goes_forth[] = {$/;"	v
struct_dude	include/constants.h	/^} struct_dude;$/;"	t	typeref:struct:tag_struct_dude
struct_piece	include/constants.h	/^} struct_piece;$/;"	t	typeref:struct:tag_struct_piece
tag_boundary_side	src/tetris.c	/^typedef enum tag_boundary_side {$/;"	g	file:
tag_crossing_action	include/conflict_resolution.h	/^typedef enum tag_crossing_action { prevention, signal } crossing_action;$/;"	g
tag_dude_action	src/tetris.c	/^typedef enum tag_dude_action {$/;"	g	file:
tag_enum_direction	include/constants.h	/^typedef enum tag_enum_direction {$/;"	g
tag_enum_field	include/constants.h	/^typedef enum tag_enum_field {$/;"	g
tag_enum_posture	include/constants.h	/^typedef enum tag_enum_posture {$/;"	g
tag_form	include/constants.h	/^    union tag_form {$/;"	u	struct:tag_struct_piece
tag_move_direction	include/constants.h	/^typedef enum tag_move_direction { left = 1, right } move_direction;$/;"	g
tag_piece_action	src/tetris.c	/^typedef enum tag_piece_action {$/;"	g	file:
tag_position	include/constants.h	/^typedef enum tag_position {$/;"	g
tag_speed_list	include/constants.h	/^typedef enum tag_speed_list {$/;"	g
tag_struct_dude	include/constants.h	/^typedef struct tag_struct_dude {$/;"	s
tag_struct_piece	include/constants.h	/^typedef struct tag_struct_piece {$/;"	s
tag_transform_field_action	src/tetris.c	/^typedef enum tag_transform_field_action {$/;"	g	file:
take_	src/tetris.c	/^void take_(piece_action action, int x, int y)$/;"	f
tenth	include/constants.h	/^        eighth  = 135,  ninth      = 94,   tenth      = 64,   eleventh  = 43,$/;"	e	enum:tag_speed_list
there_are_completed_lines	src/tetris.c	/^bool there_are_completed_lines($/;"	f
third	include/constants.h	/^        zero,           first      = 1000000, second     = 793,  third     = 618,$/;"	e	enum:tag_speed_list
thirteenth	include/constants.h	/^        twelfth = 28,   thirteenth = 18,   fourteenth = 11,   fifteenth = 7$/;"	e	enum:tag_speed_list
three_lines_score_bonus	include/constants.h	/^    three_lines_score_bonus             = 500,$/;"	e	enum:constants
time_start	src/tetris.c	/^void time_start(struct timeval *tv1, struct timezone *tz)$/;"	f
time_stop	src/tetris.c	/^int time_stop($/;"	f
top	src/tetris.c	/^    bottom, top, left_side, right_side$/;"	e	enum:tag_boundary_side	file:
top_boundary_height	include/frontend.h	/^    top_boundary_height                 = 1,$/;"	e	enum:frontend_consts
transform_field_action	src/tetris.c	/^} transform_field_action;$/;"	t	typeref:enum:tag_transform_field_action	file:
transform_field_array	src/tetris.c	/^void transform_field_array($/;"	f
transpose_callback	src/rotation.c	/^static void transpose_callback(void *dst, void *src, int len, int x, int y)$/;"	f	file:
truncate_piece	src/tetris.c	/^void truncate_piece(struct_piece *piece)$/;"	f
twelfth	include/constants.h	/^        twelfth = 28,   thirteenth = 18,   fourteenth = 11,   fifteenth = 7$/;"	e	enum:tag_speed_list
two_lines_score_bonus	include/constants.h	/^    two_lines_score_bonus               = 300,$/;"	e	enum:constants
vertical_1	include/constants.h	/^    horizontal_1, vertical_1, horizontal_2, vertical_2, orientation_count$/;"	e	enum:tag_position
vertical_2	include/constants.h	/^    horizontal_1, vertical_1, horizontal_2, vertical_2, orientation_count$/;"	e	enum:tag_position
vertical_orientation	src/conflict_resolution.c	/^static bool vertical_orientation(const struct_piece *piece)$/;"	f	file:
wait_until_esc_is_pressed_then_exit	src/tetris.c	/^void wait_until_esc_is_pressed_then_exit()$/;"	f
x_shift	include/constants.h	/^    signed char x_shift, y_decline, ghost_decline;$/;"	m	struct:tag_struct_piece
x_shift	include/constants.h	/^    signed char x_shift, y_decline;$/;"	m	struct:tag_struct_dude
y_decline	include/constants.h	/^    signed char x_shift, y_decline, ghost_decline;$/;"	m	struct:tag_struct_piece
y_decline	include/constants.h	/^    signed char x_shift, y_decline;$/;"	m	struct:tag_struct_dude
zero	include/constants.h	/^        zero,           first      = 1000000, second     = 793,  third     = 618,$/;"	e	enum:tag_speed_list
